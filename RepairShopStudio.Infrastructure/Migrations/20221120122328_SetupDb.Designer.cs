// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairShopStudio.Infrastructure.Data;

#nullable disable

namespace RepairShopStudio.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221120122328_SetupDb")]
    partial class SetupDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Adrres text - street, number, etc.");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Town name");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasComment("ZIP code of the town");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasComment("Addres properties");

                    b.HasData(
                        new
                        {
                            Id = "6a27fcd0-81f5-412d-80c8-39cc0f6c81f0",
                            AddressText = "Tsar Osvobodiltel str. 98",
                            TownName = "Varna",
                            ZipCode = "9000"
                        },
                        new
                        {
                            Id = "f03b1057-88f7-47e2-a745-580c6150e371",
                            AddressText = "Slivnitsa blv. 108",
                            TownName = "Varna",
                            ZipCode = "9000"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The address of the customer's office");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email of the customer");

                    b.Property<bool>("IsCorporate")
                        .HasColumnType("bit")
                        .HasComment("Defines if the customer is corporate or individual");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Name of the customer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasComment("Phone number of the cusotmer");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Name of the responsible person of the customer's company");

                    b.Property<string>("Uic")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The Unit Identification Code of the customer's company");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");

                    b.HasComment("Customer information");

                    b.HasData(
                        new
                        {
                            Id = "94eb73a3-e208-4409-bbed-4fc326255fdc",
                            AddressId = "6a27fcd0-81f5-412d-80c8-39cc0f6c81f0",
                            Email = "ivan.ivanov@abv.bg",
                            IsCorporate = true,
                            Name = "Ivan Ivanov",
                            PhoneNumber = "099999999",
                            ResponsiblePerson = "Ivan Ivanov",
                            Uic = "1234543421234"
                        },
                        new
                        {
                            Id = "38dea0ea-cd19-49b9-a280-b869461def95",
                            Email = "boris.borisov@abv.bg",
                            IsCorporate = false,
                            Name = "Boris Borisov",
                            PhoneNumber = "0898888888"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.EngineType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Name of engine type");

                    b.HasKey("Id");

                    b.ToTable("EngineTypes");

                    b.HasComment("Type of the vehicle's engine");

                    b.HasData(
                        new
                        {
                            Id = "545F6ADA-C535-476A-8B65-A8E2ADEE5F7C",
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = "026c3f78-94d5-4f4e-8e8f-fea783a8a93f",
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = "e6c84886-dba7-4a1c-8448-60fcf66a71e0",
                            Name = "Hybrid"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.JobTitle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Job title");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");

                    b.HasComment("Possible job titles");

                    b.HasData(
                        new
                        {
                            Id = "3bb29f58-330b-47d7-8c88-66e47a5fd4aa",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = "093fd016-778f-4043-b72e-827c1834c4e2",
                            Name = "Mechanic"
                        },
                        new
                        {
                            Id = "16afcac4-cb26-4c2e-9586-7cc4c2fab81c",
                            Name = "Service adviser"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the document");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The number of current document");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("money")
                        .HasComment("The total amount of parts and services");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OperatingCards");

                    b.HasComment("Operating card for the current service");

                    b.HasData(
                        new
                        {
                            Id = "badc0c29-a923-4f82-9f07-42417bf97c58",
                            ApplicationUserId = new Guid("76463d15-5e1f-4877-9447-6dc1f3c4d8fe"),
                            CustomerId = "94eb73a3-e208-4409-bbed-4fc326255fdc",
                            Date = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Discount = 10.0,
                            DocumentNumber = "000111/20/2022 12:00:00 AM",
                            TotalAmount = 193.095m
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCardParts", b =>
                {
                    b.Property<string>("OperatingCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatingCardId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("OperatingCardParts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCardShopService", b =>
                {
                    b.Property<string>("OperatingCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OperatingCardId", "ShopServiceId");

                    b.HasIndex("ShopServiceId");

                    b.ToTable("OperatingCardShopService");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the creation of the order");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Document number");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Supplier which will deliver the goods");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");

                    b.HasComment("Order of parts properties");

                    b.HasData(
                        new
                        {
                            Id = "9961AF43-3CC2-48EE-B760-89FC2CFACF20",
                            IsActive = true,
                            IssueDate = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Note = "To arrive today",
                            Number = "0001/11/20/2022 12:00:00 AM",
                            SupplierId = "EDD4D809-A15C-4C6C-BC01-E6B4E9D23616"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Part", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Description of the part");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Manufacturer's name of the part");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the part");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalMpn")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Part's MPN by the car manufacturer");

                    b.Property<decimal>("PriceBuy")
                        .HasPrecision(18, 2)
                        .HasColumnType("money")
                        .HasComment("Delivery price (by the supplier)");

                    b.Property<decimal>("PriceSell")
                        .HasPrecision(18, 2)
                        .HasColumnType("money")
                        .HasComment("Selling price (by the repair shop)");

                    b.Property<string>("ShopServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasComment("Part's availability");

                    b.Property<string>("VehicleComponentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Affected part of the vehicle, where the part may be used");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopServiceId");

                    b.HasIndex("VehicleComponentId");

                    b.ToTable("Parts");

                    b.HasComment("Part, stored in the shop's warehouse");

                    b.HasData(
                        new
                        {
                            Id = "7349E46E-0F79-4D5A-8F09-A30B44BEDFA2",
                            Description = "Front",
                            ImageUrl = "https://www.zimmermann-bremsentechnik.eu/images/product_images/info_images/400_3649_52.jpg",
                            IsActive = true,
                            Manufacturer = "Zimmerman",
                            Name = "Sport Brake Disc for MERCEDES-BENZ M-KLASSE (W164)",
                            OriginalMpn = "400.3649.52",
                            PriceBuy = 99.98m,
                            PriceSell = 114.56m,
                            Stock = 4,
                            VehicleComponentId = "6e3cb03f-7a41-426a-9c72-0cd609511ccd"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.ShopService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of the service");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the service");

                    b.Property<string>("OperatingCardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("money")
                        .HasComment("Price of the service");

                    b.Property<string>("VehicleComponentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Affected part of the vehicle");

                    b.HasKey("Id");

                    b.HasIndex("OperatingCardId");

                    b.HasIndex("VehicleComponentId");

                    b.ToTable("ShopServices");

                    b.HasComment("Services, offered by repair shop");

                    b.HasData(
                        new
                        {
                            Id = "7BDDE324-8E4A-4BBC-BF95-92DCF598A7A6",
                            Description = "Check all compnents in breaking sistem and repairing those that need it",
                            IsActive = true,
                            Name = "Breaks check and repairs",
                            Price = 65m,
                            VehicleComponentId = "6e3cb03f-7a41-426a-9c72-0cd609511ccd"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Address of the supplier's office");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the supplier's company");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email of the supplier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the supplier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasComment("Phone number of the supplier's office");

                    b.Property<string>("Uic")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Unit Identification Code of the supplier's company");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Suppliers");

                    b.HasComment("Supplier, who delivers parts to the repair shop");

                    b.HasData(
                        new
                        {
                            Id = "EDD4D809-A15C-4C6C-BC01-E6B4E9D23616",
                            AddressId = "f03b1057-88f7-47e2-a745-580c6150e371",
                            CompanyName = "Garvan EOOD",
                            Email = "garvan@abv.bg",
                            Name = "Garvan",
                            PhoneNumber = "0898888888",
                            Uic = "123456789876"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.SupplierSparePart", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatingCardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplierId", "PartId");

                    b.HasIndex("OperatingCardId");

                    b.HasIndex("PartId");

                    b.ToTable("SupplierSparePart");

                    b.HasComment("Mapping entity between suppliers and parts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Additional user properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bc5851a-9b57-4d66-99ae-4bfd11f26bd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c35a4846-e7f5-4948-b088-871c88be33a5",
                            Email = "manager_repair_shop@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER_REPAIR_SHOP@MAIL.COM",
                            NormalizedUserName = "GENERAL_MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMexX17EVLV/Mt7z3c+R45kGJmrOQ93aKx7aMvDvTIRXt1giV2Fcysv9MTn3mzbVnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70c7ac29-fc79-45e7-9d29-b922b7cd7f1e",
                            TwoFactorEnabled = false,
                            UserName = "General_Manager"
                        },
                        new
                        {
                            Id = new Guid("59bff60d-d8d8-4ca8-9da9-48149761e9db"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faff18ec-3d37-47f5-a6e9-495ee15493b5",
                            Email = "mechanic_repair_shop@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MECHANIC_REPAIR_SHOP@MAIL.COM",
                            NormalizedUserName = "MECHANIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnF5lbQBeKdJwfqM1PQfObgMdn6YjRCKCqx0LzRUrQ/x4xLOGFggr3pXezo2HDs8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5755db6a-132e-475d-93b6-d6c2f46f6fad",
                            TwoFactorEnabled = false,
                            UserName = "Mechanic"
                        },
                        new
                        {
                            Id = new Guid("4d3bb951-2772-4ae8-b6bb-eb4e80426b0e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cd0acbf-1cbd-49ee-bf09-726cf295111a",
                            Email = "adviser_repair_shop@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVISER_REPAIR_SHOP@MAIL.COM",
                            NormalizedUserName = "SERVICE_ADVISER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBzfW2JcPpiyYta5aAtHmCJJI7RAi3UpNzWtpp7H7iffDpNR1xoGjecUL2u2BEv7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "780e294a-90d6-4b9f-987f-a958b729a0b3",
                            TwoFactorEnabled = false,
                            UserName = "Service_Adviser"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EngineTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Engine type of the vehicle");

                    b.Property<DateTime>("FIrstRegistration")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the first registration of the vehicle");

                    b.Property<string>("LicensePLate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("License plate of the vehicle");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Vehicle make name");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Vehicle model name");

                    b.Property<int>("Power")
                        .HasColumnType("int")
                        .HasComment("Enginge power in Hp");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasComment("VIN number of the vehicle");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EngineTypeId");

                    b.ToTable("Vehicles");

                    b.HasComment("Vehicle, owned by customer");

                    b.HasData(
                        new
                        {
                            Id = "6e3cb03f-7a41-426a-9c72-0cd609511ccd",
                            CustomerId = "94eb73a3-e208-4409-bbed-4fc326255fdc",
                            EngineTypeId = "545F6ADA-C535-476A-8B65-A8E2ADEE5F7C",
                            FIrstRegistration = new DateTime(2013, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LicensePLate = "B5466HA",
                            Make = "Mercedes-Benz",
                            Model = "W164 350",
                            Power = 272,
                            VinNumber = "12312324125"
                        });
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.VehicleComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of vehicle component");

                    b.HasKey("Id");

                    b.ToTable("VehicleComponents");

                    b.HasComment("The components/parts of the vehicle, which can be affected by the services");

                    b.HasData(
                        new
                        {
                            Id = "46e751d0-07fc-4859-b95a-51048d4aeb1c",
                            Name = "Engine"
                        },
                        new
                        {
                            Id = "6588d450-bda4-440d-a207-82ebe875c64f",
                            Name = "Tranmission system"
                        },
                        new
                        {
                            Id = "88fb6d39-5500-48dd-893e-138cfde5b816",
                            Name = "Front and rear axle"
                        },
                        new
                        {
                            Id = "13ea9388-052b-4760-bd7d-3ad3eb04897a",
                            Name = "Steering system"
                        },
                        new
                        {
                            Id = "eac3af63-bd7b-47a2-bde4-32987fe21ad2",
                            Name = "Suspenssion system"
                        },
                        new
                        {
                            Id = "6e3cb03f-7a41-426a-9c72-0cd609511ccd",
                            Name = "Tyres and brakes"
                        },
                        new
                        {
                            Id = "eeb24e1e-7978-4748-8591-466fdb72954e",
                            Name = "Body"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Customer", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCardParts", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", "OperatingCard")
                        .WithMany()
                        .HasForeignKey("OperatingCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperatingCard");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCardShopService", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", "OperatingCard")
                        .WithMany("OperatingCardShopServices")
                        .HasForeignKey("OperatingCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.ShopService", "ShopService")
                        .WithMany()
                        .HasForeignKey("ShopServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperatingCard");

                    b.Navigation("ShopService");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Part", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Order", null)
                        .WithMany("Parts")
                        .HasForeignKey("OrderId");

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.ShopService", null)
                        .WithMany("Parts")
                        .HasForeignKey("ShopServiceId");

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.VehicleComponent", "VehicleComponent")
                        .WithMany()
                        .HasForeignKey("VehicleComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleComponent");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.ShopService", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", null)
                        .WithMany("ShopServices")
                        .HasForeignKey("OperatingCardId");

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.VehicleComponent", "VehicleComponent")
                        .WithMany()
                        .HasForeignKey("VehicleComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleComponent");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Supplier", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.SupplierSparePart", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", null)
                        .WithMany("SupplierSpareParts")
                        .HasForeignKey("OperatingCardId");

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Part", "Part")
                        .WithMany("SupplierSpareParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Supplier", "Supplier")
                        .WithMany("SupplierSpareParts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Vehicle", b =>
                {
                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairShopStudio.Infrastructure.Data.Models.EngineType", "EngineType")
                        .WithMany()
                        .HasForeignKey("EngineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EngineType");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.OperatingCard", b =>
                {
                    b.Navigation("OperatingCardShopServices");

                    b.Navigation("ShopServices");

                    b.Navigation("SupplierSpareParts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Part", b =>
                {
                    b.Navigation("SupplierSpareParts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.ShopService", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("RepairShopStudio.Infrastructure.Data.Models.Supplier", b =>
                {
                    b.Navigation("SupplierSpareParts");
                });
#pragma warning restore 612, 618
        }
    }
}
